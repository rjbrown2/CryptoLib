name: CryptoLib - KMC - Integration

on: 
  push:
    branches: [ test ]
  pull_request:

jobs:
  Redhat_Integration_Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Determine Branch on Push
        run: echo "CURRENT_BRANCH=$(git branch --show-current)" >> $GITHUB_ENV
      - name: Use Branch
        run: echo ${{ env.CURRENT_BRANCH}}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Build Compose Containers
        run: cd ./compose && docker-compose -f docker-compose-kmc-mdb up -d
      
      - name: START SQL
        run: docker exec compose_db_1 bash -c '/etc/init.d/mariadb start'
        
      - name: Remove Build Directory Redhat
        run: docker exec compose_redhat_1 bash -c 'if test -d /itc/CryptoLib/build; then rm -rf /itc/CryptoLib/build; fi' 
      - name: Build RedHat CryptoLib
        run: docker exec compose_redhat_1 bash -c 'cd /itc/CryptoLib/ && git checkout ${{ env.CURRENT_BRANCH }} && mkdir build && cd build && cmake -DDEBUG=1 -DMYSQL=1 -DLIBGCRYPT=1 -DKMCCRYPTO=1 -DENCTEST=1 -DKMC_MDB_RH=1 ../ && make'
      - name: Test RedHat CryptoLib 
        run: docker exec compose_redhat_1 bash -c 'cd /itc/CryptoLib/build/ && make test' 
        
      - name: Cleanup Redhat
        run: cd ./compose && docker-compose -f docker-compose-kmc-mdb down
        
  Debian_Integration_Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Determine Branch on Push
        run: echo "CURRENT_BRANCH=$(git branch --show-current)" >> $GITHUB_ENV
      - name: Use Branch
        run: echo ${{ env.CURRENT_BRANCH}}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Build Compose Containers
        run: cd ./compose && docker-compose -f docker-compose-kmc-mdb up -d
        
      - name: START SQL
        run: docker exec compose_db_1 bash -c '/etc/init.d/mariadb start'
        
      - name: Remove Build Directory Debian
        run: docker exec compose_debian_1 bash -c 'if test -d /itc/CryptoLib/build; then rm -rf /itc/CryptoLib/build; fi'
      - name: Exception for Git Directory
        run: docker exec compose_debian_1 bash -c 'git config --global --add safe.directory /itc/CryptoLib'
      - name: Build Debian CryptoLib
        run: docker exec compose_debian_1 bash -c 'cd /itc/CryptoLib/ && git checkout ${{ env.CURRENT_BRANCH }} && mkdir build && cd build && cmake -DDEBUG=1 -DMYSQL=1 -DLIBGCRYPT=1 -DKMCCRYPTO=1 -DENCTEST=1 -DKMC_MDB_DB=1 -DCODECOV=1 ../ && make'
      - name: Test Debian CryptoLib - ut_tc_kmc
        run: docker exec compose_debian_1 bash -c 'cd /itc/CryptoLib/build/ && make test' 
      
      - name: Code-Coverage
        run: docker exec compose_debian_1 bash -c 'apt-get install -y lcov && cd /itc/CryptoLib/build/ && make gcov'
      - name: Upload 
        uses: codecov/codecov-action@v1
        with:
          #files: ${{github.workspace}}/build/coverage/crypto_aos.c.gcov,${{github.workspace}}/build/coverage/crypto_config.c.gcov,${{github.workspace}}/build/coverage/crypto_mc.c.gcov,${{github.workspace}}/build/coverage/crypto_tc.c.gcov,${{github.workspace}}/build/coverage/crypto_user.c.gcov,${{github.workspace}}/build/coverage/crypto.c.gcov,${{github.workspace}}/build/coverage/crypto_key_mgmt.c.gcov,${{github.workspace}}/build/coverage/crypto_print.c.gcov,${{github.workspace}}/build/coverage/crypto_tm.c.gcov,${{github.workspace}}/build/coverage/sadb_routine_inmemory.template.c.gcov
          files: 'coverage/*.c.gcov'        
      
      - name: Cleanup Debian
        run: cd ./compose && docker-compose -f docker-compose-kmc-mdb down
